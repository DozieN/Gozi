/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package org.gozi.androidziphelper;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiContext;
import org.appcelerator.titanium.util.Log;
//import org.appcelerator.titanium.util.TiFileHelper;

import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

@Kroll.module(name="Androidziphelper", id="org.gozi.androidziphelper")
public class AndroidziphelperModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "AndroidziphelperModule";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public AndroidziphelperModule(TiContext tiContext) {
		super(tiContext);
	}
	
	// Methods
	@Kroll.method
	public boolean extract(String path_to_zip_file, String dir_to_extract) {
		String scheme = "appdata-private://";
		
		String frompath = getTiContext().resolveUrl(scheme, path_to_zip_file);
		String topath = getTiContext().resolveUrl(scheme, dir_to_extract);
		
		TiBaseFile fromproxy = TiFileFactory.createTitaniumFile(getTiContext(), new String[] { frompath }, false);
		TiBaseFile toproxy = TiFileFactory.createTitaniumFile(getTiContext(), new String[] { topath }, false);
		
		try {
			getZipFiles(fromproxy.getNativeFile(), toproxy.getNativeFile());
			return true;
		}
		catch (Exception  e) {
			Log.e(LCAT, "Unable to extracting zip file: " + e.getMessage(), e);
			return false;
		}
	}
	
	private void getZipFiles(File fname, File dest) 
	throws IOException
	{
        ZipInputStream zipinputstream = null;
        ZipEntry zipentry;
	    try {
	    	zipinputstream = new ZipInputStream(new FileInputStream(fname));
	        while ((zipentry = zipinputstream.getNextEntry()) != null) 
	        {
	            String name  = zipentry.getName();
	            File newFile = new File(dest, name);
	            String filename = newFile.getName();

	            Log.d(LCAT, "Extracting " + filename);
	            if (filename != "" && filename.indexOf(".") > -1)
	            {
		            String fullPath = newFile.getAbsolutePath();
		            File fullDir = newFile.getParentFile();
		            
		            Log.d(LCAT, "Parent directory is : " + fullDir.getAbsolutePath());
		            Log.d(LCAT, "Parent fullPath is : " + fullPath);
		            
		            if (!fullDir.exists())
		            {
		            	fullDir.mkdirs();
		            }
		            FileOutputStream  fileoutputstream = new FileOutputStream (new File(dest,name));
		            int size = 2048;
	                byte[] data = new byte[2048];
	                while (true)
	                {
	                    size = zipinputstream.read(data, 0, data.length);
	                    if (size > 0)
	                    {
	                    	fileoutputstream.write(data, 0, size);
	                    }
	                    else
	                    {
	                        break;
	                    }
	                }
	
		            fileoutputstream.close();
	            }

	        }//while

	        zipinputstream.close();
	    } 
	    finally {
			if (zipinputstream != null) {
				try {
			        zipinputstream.close();
				}catch (Throwable t) {
					//Ignore
				}
			}
		}
	}
}
